generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], name: "account_userId_index")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "session_userId_index")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts      Account[]
  sessions      Session[]
  credits       Int          @default(5)
  webAnalytic   webAnalysis[]
  videoModules  VideoModule[]
}

model webAnalysis {
  id         String   @id @default(cuid())
  name       String?
  url        String   @unique
  summary    String   @db.Text
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
}

model VideoModule {
  id               String   @id @default(cuid())
  name             String   @default("New Module")
  userId           String
  createdAt        DateTime @default(now())
  videos           Video[]
  originalModuleId String?  // New field to store the original module ID if cloned
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId], name: "videoModule_userId_index")
}

model Video {
  id               String       @id @default(cuid())
  name             String?
  url              String       
  videoId          String       
  summary          String?      @db.Text  // Stores the JSON-stringified transcript
  generatedSummary String?      @db.Text  // Stores the AI-generated summary
  moduleId         String

  note             String?
  embeddingCreated Boolean      @default(false)

  createdAt        DateTime     @default(now())
  videoModule      VideoModule? @relation(fields: [moduleId], references: [id], onDelete: SetNull)
  quizzes          Quiz[]
  chat             Chat[]

  @@index([moduleId], name: "video_moduleId_index")
  @@unique([moduleId, videoId], name: "moduleId_videoId") // Fixed unique constraint name
}

model Quiz {
  id          String   @id @default(cuid())
  videoId     String
  video       Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  question    String
  answer      String   @default("") // Max 15 words enforced in code
  options     String   // JSON stringified array of options
  @@index([videoId])
}

enum MessageRole {
  USER
  SYSTEM
}

model Chat {
  id            String       @id @default(cuid())
  videoId       String
  createdAt     DateTime  @default(now())
  video         Video     @relation(fields: [videoId], references: [id], onDelete: Cascade)
  @@index([videoId])
  messages      Message[]
}

model Message {
  id        String         @id @default(cuid())
  chatId    String
  content   String
  role      MessageRole
  createdAt DateTime    @default(now())

  chat      Chat        @relation(fields: [chatId], references: [id])
}